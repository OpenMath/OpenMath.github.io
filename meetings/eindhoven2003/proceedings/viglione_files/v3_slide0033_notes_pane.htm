<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../viglione.htm">
<link rel=Preview href=preview.wmf>

<script>
<!--
if( window.name != "PPTNts" )
  parent.location.href = "../viglione.htm";
//-->
</script>
</head>

<body bgcolor=black text=white>

<table border=0 width="100%">
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>In this slide we show which
  will be our next improvement of MoMAM@th that will lead to the complete
  editing of formulas in symbolic notation.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>To reach our aim we have
  used two WebEquation applets and the MathPlayer Plug-in of the Design
  Science.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>The <i>InputControl is </i>used
  to modify the editable parts of a formula and<span style="mso-spacerun:
  yes">  </span>let the learner write text and mathematic symbols choosing them
  by a graphic palette.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>The <i>OutputControl is </i>used
  to visualize them in the formula and the MathPlayer plug-in is used to
  display the fixed parts of the formula.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>In this way all the formulas
  are transferred by using MathML so using textual information reduces also the
  time needed to download the pages.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>The three <i>OutputControl </i>represents
  what we defined as <i>placeholders</i>. To complete a part of the formula,
  the learner selects one <i>placeholder </i>and writes the mathematic
  expression in the <i>InputControl</i>. The active <i>OutputControl </i>is
  evidenced by a red border, so the learner can understand which part<span
  style="mso-spacerun: yes">  </span>s/he is editing. When s/he ends digitizing
  the formula, pushing the ‘Transfer’ button, transfers the content<span
  style="mso-spacerun: yes">  </span>of the <i>InputControl </i>to the active <i>OutputControl</i>.
  If the user selects an <i>OutputControl</i> that is non-empty, its data is
  transferred in the <i>InputControl </i>giving her/him the possibility to
  modify them. Using the <i>InputControl</i>, the learner has also the
  possibility to do operations like copy and paste.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>WebEquations applets furnish
  a series of API to access the formulas that is represented through a MathML
  tree. We used Java Script to call the API functions in order to manipulate
  and move the expression in the <i>InputControl </i><span style="mso-spacerun:
  yes"> </span>and <i>OutputControl</i>.</font><br>
  </td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td align=left colspan=1><font face=Arial size=3>Our solution still has some
  problems: we use many applets, their fixed server-side dimensions cannot be
  modified by the client-side by the usual browser commands. Moreover it is
  necessary to write a lot of Java Script code to manage the applet communications.
  Indeed one limitation of WebEquation controls is that they can be controlled
  by JavaScript code but they are not able to issue events. This obliged us,
  for example, to capture the focus of the <i>OutputControl</i> by means of
  adding objects, because the applet does not manage the event <i>onmouseclick</i>.</font><br>
  </td>
 </tr>
</table>

</body>

</html>
